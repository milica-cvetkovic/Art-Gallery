{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n* focus-trap 7.4.3\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { isFocusable, tabbable, focusable, isTabbable } from 'tabbable';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event]\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || (\n      // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target, e) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var target = getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 ? void 0 : onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 ? void 0 : onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\nexport { createFocusTrap };","map":{"version":3,"names":["activeFocusTraps","activateTrap","trapStack","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","_len","arguments","params","Array","_key","apply","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","_objectSpread2","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","includes","find","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","isFocusable","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKeyNav","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref2","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref3","_destinationGroupIndex","_destinationGroup","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","checkDomRemoval","mutations","isFocusedNodeRemoved","some","mutation","removedNodes","from","mutationObserver","window","MutationObserver","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean"],"sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event]\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target, e) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    const target = getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n      updateObservedNodes();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}